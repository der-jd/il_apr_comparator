version: 2.1


parameters:
  create-base-infrastructure:
    description: If true, creates the necessary base infrastructure in AWS.
    type: boolean
    default: false

  delete-stacks:
    description: If true, deletes the CloudFormation stacks in AWS.
    type: boolean
    default: false


jobs:
  deploy-s3-bucket:
    docker:
      - image: cimg/aws:2023.03
    steps:
      - checkout
      - run:
          name: "Install dependencies"
          command: |
            pip install -r ./aws/requirements.txt
      - run:
          name: "Deploy stack for S3 bucket"
          command: ./aws/deploy_stack.py --template "./aws/s3-lambda.yaml" --stack_name "il-apr-comparator-s3-bucket-stack"

  lint-python-code:
    docker:
      - image: cimg/python:3.11.2
    steps:
      - checkout
      - run:
          name: "Install dependencies"
          command: pip install -r ./scripts/requirements.txt
      - run:
          name: "Install pylint"
          command: pip install pylint
      - run:
          name: "Lint code"
          command: |
            for file in $(find . -name "*.py"); do
              echo "lint $file..."
              pylint $file
            done

  type-check-python-code:
    docker:
      - image: cimg/python:3.11.2
    steps:
      - checkout
      - run:
          name: "Install dependencies"
          command: pip install -r ./scripts/requirements.txt
      - run:
          name: "Install pyright"
          command: pip install pyright
      - run:
          name: "Check types"
          command: pyright

  lint-cloudformation-templates:
    docker:
      - image: cimg/python:3.11.2
    steps:
      - checkout
      - run:
          name: "Install cfn-lint"
          command: pip install cfn-lint
      - run:
          name: "Lint code"
          command: |
            for file in $(find ./aws -name "*.yaml"); do
              echo "lint $file..."
              cfn-lint $file
            done

  deploy-code:
    docker:
      - image: cimg/aws:2023.03
    steps:
      - checkout
      - run:
          name: "Install zip"
          command: sudo apt-get install zip
      - run:
          # https://docs.aws.amazon.com/lambda/latest/dg/python-package.html#python-package-create-package-with-dependency
          name: "Zip dependencies"
          command: |
            pip install -r ./scripts/requirements.txt --target ./scripts/dependencies
            export commit_hash=$(git rev-parse HEAD)
            zip -r deployment-package-commit-${commit_hash}.zip ./scripts/dependencies
      - run:
          name: "Zip code"
          command: zip -r deployment-package-commit-${commit_hash}.zip ./scripts
      - run:
          name: "Empty S3 bucket"
          command: |
            s3_bucket_name=$(aws ssm get-parameter --name "/il-apr-comparator/s3-bucket-lambda/name" --query "Parameter.Value" --output text)
            aws s3 rm s3://$s3_bucket_name --recursive
      - run:
          name: "Upload new deployment package to S3"
          command: |
            s3_bucket_name=$(aws ssm get-parameter --name "/il-apr-comparator/s3-bucket-lambda/name" --query "Parameter.Value" --output text)
            aws s3 cp "deployment-package-commit-${commit_hash}.zip" "s3://$s3_bucket_name"
      - run:
          name: "Update S3Key in CloudFormation template"
          command: sed -i "s/S3Key: \"deployment-package-commit-[a-fA-F0-9]\{40\}\.zip\"/S3Key: \"deployment-package-commit-${commit_hash}\.zip\"/" ./aws/services.yaml

  deploy-services:
    docker:
      - image: cimg/aws:2023.03
    steps:
      - checkout
      - run:
          name: "Install dependencies"
          command: pip install -r ./aws/requirements.txt
      - run:
          name: "Deploy stack for services"
          command: ./aws/deploy_stack.py --template "./aws/services.yaml" --stack_name "il-apr-comparator-stack"

  delete-services:
    docker:
      - image: cimg/aws:2023.03
    steps:
      - checkout
      - run:
          name: "Install dependencies"
          command: pip install -r ./aws/requirements.txt
      - run:
          name: "Delete stack for services"
          command: ./aws/delete_stack.py --stack_name "il-apr-comparator-stack"

  delete-s3-bucket:
    docker:
      - image: cimg/aws:2023.03
    steps:
      - checkout
      - run:
          name: "Install dependencies"
          command: pip install -r ./aws/requirements.txt
      - run:
          name: "Empty S3 bucket"
          command: |
            s3_bucket_name=$(aws ssm get-parameter --name "/il-apr-comparator/s3-bucket-lambda/name" --query "Parameter.Value" --output text)
            aws s3 rm s3://$s3_bucket_name --recursive
      - run:
          name: "Delete stack for S3 bucket"
          command: ./aws/delete_stack.py --stack_name "il-apr-comparator-s3-bucket-stack"


workflows:
  build-deploy:
    when:
      and:
        - not: << pipeline.parameters.create-base-infrastructure >>
        - not: << pipeline.parameters.delete-stacks >>
    jobs:
      - deploy-s3-bucket
      - lint-python-code
      - type-check-python-code
      - lint-cloudformation-templates
      - deploy-code:
          requires:
            - deploy-s3-bucket
            - lint-python-code
            - type-check-python-code
            - lint-cloudformation-templates
      - deploy-services:
          requires:
            - deploy-code

  create-base-infrastructure:
    when: << pipeline.parameters.create-base-infrastructure >>
    jobs:
      - deploy-s3-bucket

  delete-stacks:
    when: << pipeline.parameters.delete-stacks >>
    jobs:
      - delete-services
      - delete-s3-bucket:
          requires:
            - delete-services
