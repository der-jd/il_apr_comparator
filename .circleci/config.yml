version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1


parameters:
  create-base-infrastructure:
    description: If true, creates the necessary base infrastructure in AWS.
    type: boolean
    default: false

  delete-stacks:
    description: If true, deletes the CloudFormation stacks in AWS.
    type: boolean
    default: false


jobs:
  deploy-ecr-repo:
    docker:
      - image: cimg/aws:2023.05
    steps:
      - checkout
      - run:
          name: "Clone repo for deployment scripts"
          command: git clone https://${GH_PAT_CFN_SCRIPTS_REPO}@github.com/der-jd/aws_cloudformation_scripts.git --branch v1.0.0 --depth 1 ../aws_cloudformation_scripts
      - aws-cli/setup:
          role-arn: "$AWS_ROLE_ARN"
          aws-region: AWS_REGION
      - run:
          name: "Install dependencies"
          command: |
            pip install -r ../aws_cloudformation_scripts/scripts/requirements.txt
      - run:
          name: "Deploy stack for ECR"
          command: |
            ../aws_cloudformation_scripts/scripts/deploy_stack.py --template "./cloudformation/ecr.yaml" --stack_name "il-apr-comparator-ecr-repo"

  lint-python-code:
    docker:
      - image: cimg/python:3.11
    steps:
      - checkout
      - run:
          name: "Install dependencies"
          command: pip install -r ./app/requirements.txt
      - run:
          name: "Install pylint"
          command: pip install pylint
      - run:
          name: "Lint code"
          command: make lint-python

  type-check-python-code:
    docker:
      - image: cimg/python:3.11
    steps:
      - checkout
      - run:
          name: "Install dependencies"
          command: pip install -r ./app/requirements.txt
      - run:
          name: "Install pyright"
          command: pip install pyright
      - run:
          name: "Check types"
          command: make typecheck-python

  lint-cloudformation-templates:
    docker:
      - image: cimg/python:3.11
    steps:
      - checkout
      - run:
          name: "Install cfn-lint"
          command: pip install cfn-lint
      - run:
          name: "Lint code"
          command: make lint-cfn

  lint-dockerfile:
    docker:
      - image: cimg/base:current
    steps:
      - checkout
      - run:
          name: "Install hadolint"
          command: |
            curl --location --output $HOME/bin/hadolint "https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64"
            chmod +x $HOME/bin/hadolint
      - run:
          name: "Lint Dockerfile"
          command: make hadolint

  build-image:
    docker:
      - image: cimg/base:2023.05
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: "Build Docker image"
          command: make build

  upload-image:
    docker:
      - image: cimg/aws:2023.05
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - aws-cli/setup:
          role-arn: "$AWS_ROLE_ARN"
          aws-region: AWS_REGION
      - run:
          name: Authenticate to ECR
          command: aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
      - run:
          name: "Upload image to ECR"
          command: |
            repo_name=$(aws ssm get-parameter --name "/il-apr-comparator/ecr-repo/name" --query "Parameter.Value" --output text)
            commit_hash=$(git rev-parse HEAD)
            docker tag il-apr-comparator $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$repo_name:latest
            docker tag il-apr-comparator $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$repo_name:$commit_hash
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$repo_name:latest
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$repo_name:$commit_hash

  deploy-services:
    docker:
      - image: cimg/aws:2023.05
    steps:
      - checkout
      - run:
          name: "Clone repo for deployment scripts"
          command: git clone https://${GH_PAT_CFN_SCRIPTS_REPO}@github.com/der-jd/aws_cloudformation_scripts.git --branch v1.0.0 --depth 1 ../aws_cloudformation_scripts
      - aws-cli/setup:
          role-arn: "$AWS_ROLE_ARN"
          aws-region: AWS_REGION
      - run:
          name: "Install dependencies"
          command: pip install -r ../aws_cloudformation_scripts/scripts/requirements.txt
      - run:
          name: "Deploy stack for services"
          command: |
            repo_name=$(aws ssm get-parameter --name "/il-apr-comparator/ecr-repo/name" --query "Parameter.Value" --output text)
            image_uri="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$repo_name:latest"
            ../aws_cloudformation_scripts/scripts/deploy_stack.py --template "./cloudformation/services.yaml" --parameters ImageURI=${image_uri} --stack_name "il-apr-comparator"

  delete-services:
    docker:
      - image: cimg/aws:2023.05
    steps:
      - checkout
      - run:
          name: "Clone repo for deployment scripts"
          command: git clone https://${GH_PAT_CFN_SCRIPTS_REPO}@github.com/der-jd/aws_cloudformation_scripts.git --branch v1.0.0 --depth 1 ../aws_cloudformation_scripts
      - aws-cli/setup:
          role-arn: "$AWS_ROLE_ARN"
          aws-region: AWS_REGION
      - run:
          name: "Install dependencies"
          command: pip install -r ../aws_cloudformation_scripts/scripts/requirements.txt
      - run:
          name: "Delete stack for services"
          command: ../aws_cloudformation_scripts/scripts/delete_stack.py --stack_name "il-apr-comparator"

  delete-ecr-repo:
    docker:
      - image: cimg/aws:2023.05
    steps:
      - checkout
      - run:
          name: "Clone repo for deployment scripts"
          command: git clone https://${GH_PAT_CFN_SCRIPTS_REPO}@github.com/der-jd/aws_cloudformation_scripts.git --branch v1.0.0 --depth 1 ../aws_cloudformation_scripts
      - aws-cli/setup:
          role-arn: "$AWS_ROLE_ARN"
          aws-region: AWS_REGION
      - run:
          name: "Install dependencies"
          command: pip install -r ../aws_cloudformation_scripts/scripts/requirements.txt
      - run:
          name: "Delete all images in repo"
          command: |
            repo_name=$(aws ssm get-parameter --name "/il-apr-comparator/ecr-repo/name" --query "Parameter.Value" --output text)
            image_ids=$(aws ecr list-images --repository-name $repo_name --query 'imageIds[*]' --output json)
            aws ecr batch-delete-image \
              --repository-name $repo_name \
              --image-ids "$image_ids"
      - run:
          name: "Delete stack for ECR repo"
          command: ../aws_cloudformation_scripts/scripts/delete_stack.py --stack_name "il-apr-comparator-ecr-repo"


workflows:
  build-deploy:
    when:
      and:
        - not: << pipeline.parameters.create-base-infrastructure >>
        - not: << pipeline.parameters.delete-stacks >>
    jobs:
      - lint-python-code
      - type-check-python-code
      - lint-cloudformation-templates
      - lint-dockerfile
      - build-image:
          requires:
            - lint-python-code
            - type-check-python-code
            - lint-cloudformation-templates
            - lint-dockerfile
      - upload-image:
          requires:
            - build-image
      - deploy-services:
          requires:
            - upload-image
          context: github

  create-base-infrastructure:
    when: << pipeline.parameters.create-base-infrastructure >>
    jobs:
      - deploy-ecr-repo:
          context: github

  delete-stacks:
    when: << pipeline.parameters.delete-stacks >>
    jobs:
      - delete-services:
          context: github
      - delete-ecr-repo:
          requires:
            - delete-services
          context: github
