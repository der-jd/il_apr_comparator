AWSTemplateFormatVersion: '2010-09-09'

Description: Lambda function to compare Impermanent Loss to APR.


Parameters:
  ImageURI:
    Type: String
    Description: "URI of the container image (ECR repo) for the Lambda function."


Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Calculate Impermanent Loss for a given cryptocurrency coin pair and compare it to the APR from Liquidity Mining on Bake."
      Code:
        ImageUri: !Ref ImageURI
      PackageType: Image
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 600 # The browse.ai robot can run for quite some time
      Tags:
        - Key: "project"
          Value: "il-apr-comparator"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "Execution role automatically assumed by the corresponding Lambda function"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                "AWS:SourceAccount": !Sub "${AWS::AccountId}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole # Access CloudWatch for log output
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess # Access Parameter Store inside application code
        - !Ref SNSPolicy # Access SNS topic inside application code
      Tags:
        - Key: "project"
          Value: "il-apr-comparator"

  LambdaTriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LambdaScheduleRule.Arn

  SNSPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "Allow publishing to the SNS topic for the il-apr-comparator"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Action:
            - sns:publish
          Resource:
            - !Ref SNSTopicForResult
            - !Ref SNSTopicForErrors

  SNSTopicForResult:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        - Key: "project"
          Value: "il-apr-comparator"

  SNSTopicForResultSubscriptions:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: "{{resolve:ssm:/il-apr-comparator/notifications/result/mail-address}}"
      Protocol: email
      TopicArn: !Ref SNSTopicForResult

  SNSTopicForResultParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/il-apr-comparator/sns/topic/result"
      Description: "Name of the SNS topic for notifications about the comparison result. Consumed in application code."
      Type: String
      Value: !Ref SNSTopicForResult
      Tags:
        project: il-apr-comparator

  SNSTopicForErrors:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        - Key: "project"
          Value: "il-apr-comparator"

  SNSTopicForErrorsSubscriptions:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: "{{resolve:ssm:/il-apr-comparator/notifications/errors/mail-address}}"
      Protocol: email
      TopicArn: !Ref SNSTopicForErrors

  SNSTopicForErrorsParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/il-apr-comparator/sns/topic/errors"
      Description: "Name of the SNS topic for notifications about execution errors. Consumed in application code."
      Type: String
      Value: !Ref SNSTopicForErrors
      Tags:
        project: il-apr-comparator

  LambdaScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Schedule rule to trigger Lambda function"
      ScheduleExpression: 'rate(30 days)'
      State: ENABLED
      Targets:
        - Id: LambdaTarget
          Arn: !GetAtt LambdaFunction.Arn
